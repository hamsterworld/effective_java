호출된 매서드가 실패하더라도 해당 객체는 메서드 호출 전 상태를 유지해야한다.

1. 불변객체를 설계한다.
불변객체는 태생적으로 원자적이다.
기존객체가 불안정한 상태에 빠지는 일은 결코 없다.
생성시점에서 이미 절대 고정되기때문이다.

2. 내부상태를 변경하려는 로직을 하기전에 Validation 도 좋은 선택이다.
대표적으로 Stack 을 보자.
public Object pop(){
    if(size == 0){
        throw new EmptyStackException();
    }
    Object result = elements[--size];
    elements[size] = null;
    return result;
}
if 문에서 size 값을 확인하여 내부상태가 변경되기전에 미리 예외를 던져서 내부상태로직을 가기전에서 마무리한다.

3. 객체의 임시 복사본에서 작업을 수행한다음 작업이 성공적으로 완료되면 교체하는것이다.

++ 실패의 원자성은 일반적으로 권장되는 덕목이지만 항상 달성할수있는것은 아니다.
1. 두 스레드가 동기화없이 같은 객체를 수정한다 => 일관성깨짐
2. Error 같은 경우는 복구불가능 실패원자적 시도조차 할필요가없다.

++ 실패 원자적으로 할수있더라도 항상 해야하는것은 아니다.
실패원자성을 달성하기위해 복잡도가 높아지거나 연산이 많아지는경우도있다.
그래도 문제가 무엇인지 알고있다면 실패원자성을 공짜로 얻을때도있다.

결론, 실패원자성은 객체를 실패전으로 유지해야하게 설계하는것은 기본규칙이다.
그러나 이규칙을 지키지못했을때는 API 설명에 명시를 해야한다.
