복구할수있는 상황에는 검사 예외를,
프로그래밍 오류에는 런타임 예외를 사용하라.

자바에는 [문제상황을 알리는 타입]으로 검사예외,비검사예외,에러 3가지종류가 있다.
(개인적인 생각, 예외의 가장중요한것은 문제상황을 알리는것!!)

검사예외 vs 비검사예외
{검사예외}는 호출하는 쪽에서 해결할수있다고 생각되면 던지는 예외이다.
다시 말하면 API 사용자에게 예외를 던져서 이상황을 회복하라고 던진것이다. ==> 기본적인 전제는 상황을 해결하라는것
그래서 검사예외를 던지면 예외를
1. [catch 로 잡아서 처리]하거나
2. [더바깥으로 전파]하도록 강제하게된다. ==> 여기서못하니 상위클래스가서 해결하라. 사실상 무책임하게 던지는것이고 위로간다고해도 해결할수있는 방법을 내놓을수없다.

ex-1)
파일을 찾아야하나 못찾아서 터지는 fileNotFoundException 검사예외를 생각해보자.
없으면 catch 문에서 잡아서 기본이미지를 전송하도록한다.
즉, 기본적인 복구전략을 세울수있다.
그러나 이런식은 사실 코드의 흐름으로 제어하는것이 맞다.
if(IsExistedFile){
    전송
} else {
    파일없으면 기본파일전송
}
그리고 검사예외가 발생할경우 복구할수있는 경우가 사실상 많지않다.
유니크해야 하는 이메일 값이 중복돼서 SQLException 이 발생하는 경우 어떻게 복구 전략을 가질 수 있을까요?
유저가 압력을 가했던 이메일 + 난수를 입력해서 insert 시키면 가능은 하겠지만
현실에서는 그냥 RuntimeException 을 발생시키고 입력을 다시 유도하는 것이 현실적입니다.
!! 중요한것은
여기서 중요한 것은 해당 Exception 을 발생시킬 때
명확하게 어떤 예외가 발생해서 Exception 이 발생했는지 정보를 전달해주는 것입니다.
위 같은 경우에는 DuplicateEmailException (Unchecked Exception)을 발생 시는 것이 바람직합니다.
Checked Exception 을 만나면 더 구체적인 Unchecked Exception 을 발생시켜 정확한 정보를 전달하고 로직의 흐름을 끊어야 합니다.

ex-2)
예외처리를 바깥으로 던져도 결국 throw 하든, try-catch 하든 무의미적으로 반복적으로 예외를 던지게된다.

결론!!
더 구체적인 RuntimeException 을 던져서 에러에대한 메시지를 전달하여
사용자가 문제적인 상황을 정확히 인지할수있는게 중요하다.


{비검사예외}는 호출하는 쪽에서 해결할수없다고 생각되면 던지는 예외이다.
프로그램에서 잡을필요가없거나, 잡지말아야한다.
즉, 복구가 불가능해서 더실행해봐야 득보다는 실이많다는것이다.
내가 코딩하다가 실수해서 나오는 오류들 나타낼때는 런타임오류가 맞다.
복구할수있는상황인지 아닌지 애매하다면 비검사예외를 사용하는것이 낫다.


결론)
예외 복구 전략이 명확하고 그것이 가능하다면 Checked Exception 을 try catch 로 잡고 해당 복구를 하는 것이 좋습니다.

하지만 그러한 경우는 흔하지 않으며 [Checked Exception 이 발생하면 더 구체적인 Unchecked Exception 을 발생시키고 예외에 대한 메시지를 명확하게 전달하는 것]이 효과적입니다. => 지금의 내가할수있는 최선

무책임하게 상위 메서드로 throw 를 던지는 행위는 하지 않는 것이 좋습니다. 상위 메서드들의 책임이 그만큼 증가하기 때문입니다.
Checked Exception 은 기본 트랜잭션에 속성에서는 rollback 을 진행하지 않는 점도 알고 있어야 실수를 방지할 수 있습니다.
