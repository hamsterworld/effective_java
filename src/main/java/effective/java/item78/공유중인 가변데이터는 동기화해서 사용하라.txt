공유중인 가변 데이터는 동기화해서 사용하라.

synchronized 키워드의 기능

1. 한 스레드씩 메서드나 블록을 한번에 한 스레드씩 수행하도록 보장한다.
2. 한 스레드가 만든 최종적인 변화의 결과를 다른 스레드에서 확인할수있게 해준다.

언어 명세상 long,double 이외의 다른 변수들은 원자성을 보장한다.
즉, 내가 int a = 1 => int a = 2로 변경했을때
이쓰레드내에서의 저장한 a 의값을 온전히 읽어옴을 보장한다.
그러나!
다른 스레드가 int a 를 읽을려고했을때 그변화한 값을 보여주는가는 보장하지않는다.
이것에대한 대표적인 예가 brokenStopThread 이다.

결론적으로 동기화는 배타적실행뿐만아니라 스레드 사이의 안정적인 통신을 위해서도 꼭 필요하다.


volatile 키워드의 기능

volatile 키워드는 스레드사이의 안정적인 통신의 기능만을 위한다면
이것만 사용해도 좋다.
그러나 한스레드가 하나씩만 수행하도록하는것은 보장하지 않는다.

AtomicLong 의 기능

원자성(배타적 실행), 통신 두기능 모두지 원한다.
더군다나 성능도 동기화 버전보다 더 우월하다.


애초에 위의 문제를 피할려면 가장좋은거은 가변데이터는 공유하지않는것이다!!!
즉, 가변데이터는 단일스레드에서만 사용할수있게 프로그래밍하는것이 제일 중요하다.

----

원자성(배타적 실행) => 에대해서 좀더 알아보자.
결국 내가 중간에 실패하더라도 다시 원래대로 돌아오는 상태 = 원자성
이라고하는데 중간에 누가 끼어들면 이것을 보장하지못하므로
원자성 = 배타적실행으로 보는것 같다.
